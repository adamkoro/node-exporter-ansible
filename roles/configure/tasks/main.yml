# Create node_exporter user
- name: Create node_exporter user
  ansible.builtin.user:
    name: node_exporter
    shell: /usr/sbin/nologin
    createhome: false
    system: true

# Create node_exporter group
- name: Create node_exporter group
  ansible.builtin.group:
    name: node_exporter
    system: true

# Run arm64.yml if ansible_architecture is arm64
- name: Run arm64.yml if ansible_architecture is arm64
  ansible.builtin.include_tasks:
    file: arm64.yml
    apply:
      when: ansible_architecture == "aarch64"

# Run amd64.yml if ansible_architecture is amd64
- name: Run amd64.yml if ansible_architecture is amd64
  ansible.builtin.include_tasks:
    file: amd64.yml
    apply:
      when: ansible_architecture == "x86_64"

# Create node_exporter log directory
- name: Create node_exporter log directory
  ansible.builtin.file:
    path: /var/log/node_exporter
    state: directory
    owner: node_exporter
    group: node_exporter
    mode: '0755'

# Create node_exporter data directory
- name: Create node_exporter data directory
  ansible.builtin.file:
    path: /var/lib/node_exporter
    state: directory
    owner: node_exporter
    group: node_exporter
    mode: '0755'

# Create node_exporter text-collectors directory
- name: Create node_exporter text-collectors directory
  ansible.builtin.file:
    path: /var/lib/node_exporter/textfile_collector
    state: directory
    owner: node_exporter
    group: node_exporter
    mode: '0755'

# Create node_exporter service file
- name: Create node exporter service file
  ansible.builtin.template:
    src: node_exporter.service.j2
    dest: /etc/systemd/system/node_exporter.service
    owner: root
    group: root
    mode: '0644'
  register: node_exporter_service_config

# Create node_exporter socket file
- name: Create node exporter socket file
  ansible.builtin.template:
    src: node_exporter.socket.j2
    dest: /etc/systemd/system/node_exporter.socket
    owner: root
    group: root
    mode: '0644'
  register: node_exporter_socket_config

# Create node_exporter config file
- name: Create node exporter config file
  ansible.builtin.template:
    src: node_exporter.config.j2
    dest: /etc/node_exporter
    owner: node_exporter
    mode: '0644'
  register: node_exporter_config

# Install smart_metrics requirements
- name: Install smart_metrics requirements
  ansible.builtin.apt:
    name: 
      - smartmontools
      - moreutils
    state: present
    install_recommends: true
  when: ansible_facts['distribution'] == "Ubuntu" or ansible_facts['distribution'] == "Debian" and smart_metrics_enabled is true

# Create smart_metrics cron
- name: Create smart_metrics cron
  ansible.builtin.copy:
    content: |
      #Ansible: smart_metrics
      */1 * * * * root /usr/local/bin/smart_metrics | sponge /var/lib/node_exporter/textfile_collector/smart_metrics.prom
    dest: /etc/cron.d/smart_metrics
    mode: '0644'
  when: smart_metrics_enabled is true

# Install nvme_metrics requirements
- name: Install nvme_metrics requirements
  ansible.builtin.apt:
    name:
      - nvme-cli
      - jq
      - moreutils
    state: present
    install_recommends: true
  when: ansible_facts['distribution'] == "Ubuntu" or ansible_facts['distribution'] == "Debian" and nvme_metrics_enabled is true

# Create nvme_metrics cron
- name: Create nvme_metrics cron
  ansible.builtin.copy:
    content: |
      #Ansible: nvme_metrics
      */1 * * * * root /usr/local/bin/nvme_metrics | sponge /var/lib/node_exporter/textfile_collector/nvme_metrics.prom
    dest: /etc/cron.d/nvme_metrics
    mode: '0644'
  when: nvme_metrics_enabled is true

# Install lvm_metrics requirements
- name: Install lvm_metrics requirements
  ansible.builtin.apt:
    name:
      - moreutils
    state: present
    install_recommends: true
  when: ansible_facts['distribution'] == "Ubuntu" or ansible_facts['distribution'] == "Debian" and nvme_metrics_enabled is true

# Create lvm_metrics cron
- name: Create lvm_metrics cron
  ansible.builtin.copy:
    content: |
      #Ansible: lvm_metrics
      */1 * * * * root /usr/local/bin/lvm_metrics -g | sponge /var/lib/node_exporter/textfile_collector/lvm_metrics_lvm.prom
      */1 * * * * root /usr/local/bin/lvm_metrics -p | sponge /var/lib/node_exporter/textfile_collector/lvm_metrics_physical.prom
      */1 * * * * root /usr/local/bin/lvm_metrics -s | sponge /var/lib/node_exporter/textfile_collector/lvm_metrics_lvm_snapshot.prom
      */1 * * * * root /usr/local/bin/lvm_metrics -t | sponge /var/lib/node_exporter/textfile_collector/lvm_metrics_lvm_thin.prom
    dest: /etc/cron.d/lvm_metrics
    mode: '0644'
  when: lvm_metrics_enabled is true

# Install zfs_metrics requirements
- name: Install zfs_metrics requirements
  ansible.builtin.apt:
    name:
      - moreutils
    state: present
    install_recommends: true
  when: ansible_facts['distribution'] == "Ubuntu" or ansible_facts['distribution'] == "Debian" and nvme_metrics_enabled is true

# Create zfs_metrics cron
- name: Create zfs_metrics cron
  ansible.builtin.copy:
    content: |
      #Ansible: zfs_metrics
      */1 * * * * root /usr/local/bin/zfs_metrics | sponge /var/lib/node_exporter/textfile_collector/zfs_metrics.prom
    dest: /etc/cron.d/zfs_metrics
    mode: '0644'
  when: zfs_metrics_enabled is true

# Reload systemd daemon
- name: Reload systemd daemon
  ansible.builtin.systemd:
    daemon_reload: true

# Start node_exporter socket
- name: Start node_exporter socket
  ansible.builtin.systemd:
    name: node_exporter.socket
    state: started
    enabled: true
  register: node_exporter_socket_start

# Restart node_exporter socket
- name: Restart node_exporter socket
  ansible.builtin.systemd:
    name: node_exporter.socket
    state: restarted
    enabled: true
  when: node_exporter_socket_start is not changed and node_exporter_socket_config is changed

# Start node_exporter service
- name: Start node_exporter service
  ansible.builtin.systemd:
    name: node_exporter
    state: started
    enabled: true
  register: node_exporter_service_start

# Restart node_exporter service
- name: Restart node_exporter service
  ansible.builtin.systemd:
    name: node_exporter.service
    state: restarted
    enabled: true
  when: node_exporter_service_start is not changed and node_exporter_service_config is changed or node_exporter_config is changed
